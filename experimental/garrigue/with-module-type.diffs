Index: parsing/parser.mly
===================================================================
--- parsing/parser.mly	(revision 12005)
+++ parsing/parser.mly	(working copy)
@@ -1504,6 +1504,10 @@
       { ($2, Pwith_module $4) }
   | MODULE mod_longident COLONEQUAL mod_ext_longident
       { ($2, Pwith_modsubst $4) }
+  | MODULE TYPE mod_longident EQUAL module_type
+      { ($3, Pwith_modtype $5) }
+  | MODULE TYPE mod_longident COLONEQUAL module_type
+      { ($3, Pwith_modtypesubst $5) }
 ;
 with_type_binder:
     EQUAL          { Public }
Index: parsing/parsetree.mli
===================================================================
--- parsing/parsetree.mli	(revision 12005)
+++ parsing/parsetree.mli	(working copy)
@@ -239,6 +239,8 @@
   | Pwith_module of Longident.t
   | Pwith_typesubst of type_declaration
   | Pwith_modsubst of Longident.t
+  | Pwith_modtype of module_type
+  | Pwith_modtypesubst of module_type
 
 (* Value expressions for the module language *)
 
Index: parsing/printast.ml
===================================================================
--- parsing/printast.ml	(revision 12005)
+++ parsing/printast.ml	(working copy)
@@ -575,6 +575,12 @@
       type_declaration (i+1) ppf td;
   | Pwith_module (li) -> line i ppf "Pwith_module %a\n" fmt_longident li;
   | Pwith_modsubst (li) -> line i ppf "Pwith_modsubst %a\n" fmt_longident li;
+  | Pwith_modtype (mty) ->
+      line i ppf "Pwith_modtype\n";
+      module_type (i+1) ppf mty;
+  | Pwith_modtypesubst (mty) ->
+      line i ppf "Pwith_modtype\n";
+      module_type (i+1) ppf mty;
 
 and module_expr i ppf x =
   line i ppf "module_expr %a\n" fmt_location x.pmod_loc;
Index: typing/typemod.ml
===================================================================
--- typing/typemod.ml	(revision 12005)
+++ typing/typemod.ml	(working copy)
@@ -74,6 +74,8 @@
   : (Env.t -> Parsetree.module_expr -> module_type) ref
   = ref (fun env m -> assert false)
 
+let transl_modtype_fwd = ref (fun env m -> assert false)
+
 (* Merge one "with" constraint in a signature *)
 
 let rec add_rec_types env = function
@@ -163,6 +165,19 @@
         ignore(Includemod.modtypes env newmty mty);
         real_id := Some id;
         make_next_first rs rem
+    | (Tsig_modtype(id, mtd) :: rem, [s], Pwith_modtype pmty)
+      when Ident.name id = s ->
+        let mty = !transl_modtype_fwd initial_env pmty in
+        let mtd' = Tmodtype_manifest mty in
+        Includemod.modtype_declarations env id mtd' mtd;
+        Tsig_modtype(id, mtd') :: rem
+    | (Tsig_modtype(id, mtd) :: rem, [s], Pwith_modtypesubst pmty)
+      when Ident.name id = s ->
+        let mty = !transl_modtype_fwd initial_env pmty in
+        let mtd' = Tmodtype_manifest mty in
+        Includemod.modtype_declarations env id mtd' mtd;
+        real_id := Some id;
+        rem
     | (Tsig_module(id, mty, rs) :: rem, s :: namelist, _)
       when Ident.name id = s ->
         let newsg = merge env (extract_sig env loc mty) namelist None in
@@ -200,6 +215,12 @@
         let (path, _) = Typetexp.find_module initial_env loc lid in
         let sub = Subst.add_module id path Subst.identity in
         Subst.signature sub sg
+    | [s], Pwith_modtypesubst pmty ->
+        let id =
+          match !real_id with None -> assert false | Some id -> id in
+        let mty = !transl_modtype_fwd initial_env pmty in
+        let sub = Subst.add_modtype id mty Subst.identity in
+        Subst.signature sub sg
     | _ ->
         sg
   with Includemod.Error explanation ->
@@ -499,6 +520,8 @@
   check_recmod_typedecls env2 sdecls dcl2;
   (dcl2, env2)
 
+let () = transl_modtype_fwd := transl_modtype
+
 (* Try to convert a module expression to a module path. *)
 
 exception Not_a_path
Index: typing/includemod.ml
===================================================================
--- typing/includemod.ml	(revision 12005)
+++ typing/includemod.ml	(working copy)
@@ -326,10 +326,10 @@
 
 (* Hide the context and substitution parameters to the outside world *)
 
-let modtypes env mty1 mty2 = modtypes env [] Subst.identity mty1 mty2
-let signatures env sig1 sig2 = signatures env [] Subst.identity sig1 sig2
-let type_declarations env id decl1 decl2 =
-  type_declarations env [] Subst.identity id decl1 decl2
+let modtypes env = modtypes env [] Subst.identity
+let signatures env = signatures env [] Subst.identity
+let type_declarations env = type_declarations env [] Subst.identity
+let modtype_declarations env = modtype_infos env [] Subst.identity
 
 (* Error report *)
 
Index: typing/includemod.mli
===================================================================
--- typing/includemod.mli	(revision 12005)
+++ typing/includemod.mli	(working copy)
@@ -23,6 +23,8 @@
 val compunit: string -> signature -> string -> signature -> module_coercion
 val type_declarations:
       Env.t -> Ident.t -> type_declaration -> type_declaration -> unit
+val modtype_declarations:
+      Env.t -> Ident.t -> modtype_declaration -> modtype_declaration -> unit
 
 type symptom =
     Missing_field of Ident.t
Index: testsuite/tests/typing-modules/Test.ml.reference
===================================================================
--- testsuite/tests/typing-modules/Test.ml.reference	(revision 12005)
+++ testsuite/tests/typing-modules/Test.ml.reference	(working copy)
@@ -6,4 +6,12 @@
 #       type -'a t
 class type c = object method m : [ `A ] t end
 #   module M : sig val v : (#c as 'a) -> 'a end
+#       module type S = sig module type T module F : functor (X : T) -> T end
+# module type T0 = sig type t end
+# module type S1 = sig module type T = T0 module F : functor (X : T) -> T end
+# module type S2 = sig module F : functor (X : T0) -> T0 end
+# module type S3 =
+  sig
+    module F : functor (X : sig type t = int end) -> sig type t = int end
+  end
 # 
Index: testsuite/tests/typing-modules/Test.ml.principal.reference
===================================================================
--- testsuite/tests/typing-modules/Test.ml.principal.reference	(revision 12005)
+++ testsuite/tests/typing-modules/Test.ml.principal.reference	(working copy)
@@ -6,4 +6,12 @@
 #       type -'a t
 class type c = object method m : [ `A ] t end
 #   module M : sig val v : (#c as 'a) -> 'a end
+#       module type S = sig module type T module F : functor (X : T) -> T end
+# module type T0 = sig type t end
+# module type S1 = sig module type T = T0 module F : functor (X : T) -> T end
+# module type S2 = sig module F : functor (X : T0) -> T0 end
+# module type S3 =
+  sig
+    module F : functor (X : sig type t = int end) -> sig type t = int end
+  end
 # 
Index: testsuite/tests/typing-modules/Test.ml
===================================================================
--- testsuite/tests/typing-modules/Test.ml	(revision 12005)
+++ testsuite/tests/typing-modules/Test.ml	(working copy)
@@ -9,3 +9,11 @@
 class type c = object method m : [ `A ] t end;;
 module M : sig val v : (#c as 'a) -> 'a end =
   struct let v x = ignore (x :> c); x end;;
+
+(* with module type *)
+
+module type S = sig module type T module F(X:T) : T end;;
+module type T0 = sig type t end;;
+module type S1 = S with module type T = T0;;
+module type S2 = S with module type T := T0;;
+module type S3 = S with module type T := sig type t = int end;;
